
itchy_switches.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000762  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          00000001  00800060  00800060  000007d6  2**0
                  ALLOC
  2 .debug_aranges 00000040  00000000  00000000  000007d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000107  00000000  00000000  00000816  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000043d  00000000  00000000  0000091d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001a9  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000056d  00000000  00000000  00000f03  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000120  00000000  00000000  00001470  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000018c  00000000  00000000  00001590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000205  00000000  00000000  0000171c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	85 c0       	rjmp	.+266    	; 0x112 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a1 36       	cpi	r26, 0x61	; 97
  3e:	b1 07       	cpc	r27, r17
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	02 d0       	rcall	.+4      	; 0x48 <main>
  44:	8c c3       	rjmp	.+1816   	; 0x75e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <main>:
#include "limits.h"
#include "math.h"

int main(void)
{
	Init();
  48:	b4 d0       	rcall	.+360    	; 0x1b2 <Init>
	
	// infinite loop for our logic
	while(1) 
	{
		unsigned char sw = PollSwitch();
  4a:	58 d1       	rcall	.+688    	; 0x2fc <PollSwitch>
		switch(sw)
  4c:	84 30       	cpi	r24, 0x04	; 4
  4e:	41 f1       	breq	.+80     	; 0xa0 <main+0x58>
  50:	85 30       	cpi	r24, 0x05	; 5
  52:	48 f4       	brcc	.+18     	; 0x66 <main+0x1e>
  54:	81 30       	cpi	r24, 0x01	; 1
  56:	b9 f0       	breq	.+46     	; 0x86 <main+0x3e>
  58:	81 30       	cpi	r24, 0x01	; 1
  5a:	98 f0       	brcs	.+38     	; 0x82 <main+0x3a>
  5c:	82 30       	cpi	r24, 0x02	; 2
  5e:	d1 f0       	breq	.+52     	; 0x94 <main+0x4c>
  60:	83 30       	cpi	r24, 0x03	; 3
  62:	99 f7       	brne	.-26     	; 0x4a <main+0x2>
  64:	2e c0       	rjmp	.+92     	; 0xc2 <main+0x7a>
  66:	80 31       	cpi	r24, 0x10	; 16
  68:	f9 f0       	breq	.+62     	; 0xa8 <main+0x60>
  6a:	81 31       	cpi	r24, 0x11	; 17
  6c:	28 f4       	brcc	.+10     	; 0x78 <main+0x30>
  6e:	88 30       	cpi	r24, 0x08	; 8
  70:	c9 f0       	breq	.+50     	; 0xa4 <main+0x5c>
  72:	8c 30       	cpi	r24, 0x0C	; 12
  74:	51 f7       	brne	.-44     	; 0x4a <main+0x2>
  76:	3f c0       	rjmp	.+126    	; 0xf6 <main+0xae>
  78:	80 32       	cpi	r24, 0x20	; 32
  7a:	d1 f0       	breq	.+52     	; 0xb0 <main+0x68>
  7c:	80 33       	cpi	r24, 0x30	; 48
  7e:	29 f7       	brne	.-54     	; 0x4a <main+0x2>
  80:	2d c0       	rjmp	.+90     	; 0xdc <main+0x94>
		{
			case 0:						// nothing is pressed
				StatusLED(OFF);
  82:	80 e0       	ldi	r24, 0x00	; 0
  84:	12 c0       	rjmp	.+36     	; 0xaa <main+0x62>
				FrontLED(OFF);
				BackLED(OFF, OFF);
				MotorSpeed(0, 0);
				break;
			case 1:						// only K6
				StatusLED(OFF);
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	65 d0       	rcall	.+202    	; 0x154 <StatusLED>
				FrontLED(OFF);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	76 d0       	rcall	.+236    	; 0x17a <FrontLED>
				BackLED(OFF, ON);
  8e:	80 e0       	ldi	r24, 0x00	; 0
  90:	61 e0       	ldi	r22, 0x01	; 1
  92:	14 c0       	rjmp	.+40     	; 0xbc <main+0x74>
				MotorSpeed(0, 0);
				break;
			case 2:						// only K5
				StatusLED(OFF);
  94:	80 e0       	ldi	r24, 0x00	; 0
  96:	5e d0       	rcall	.+188    	; 0x154 <StatusLED>
				FrontLED(OFF);
  98:	80 e0       	ldi	r24, 0x00	; 0
  9a:	6f d0       	rcall	.+222    	; 0x17a <FrontLED>
				BackLED(ON, OFF);
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	0d c0       	rjmp	.+26     	; 0xba <main+0x72>
				MotorSpeed(0, 0);
				break;
			case 4:						// only K4
				StatusLED(RED);
  a0:	82 e0       	ldi	r24, 0x02	; 2
  a2:	03 c0       	rjmp	.+6      	; 0xaa <main+0x62>
				FrontLED(OFF);
				BackLED(OFF, OFF);
				MotorSpeed(0, 0);
				break;
			case 8:						// only K3
				StatusLED(GREEN);
  a4:	81 e0       	ldi	r24, 0x01	; 1
  a6:	01 c0       	rjmp	.+2      	; 0xaa <main+0x62>
				FrontLED(OFF);
				BackLED(OFF, OFF);
				MotorSpeed(0, 0);
				break;
			case 16:					// only K2
				StatusLED(YELLOW);
  a8:	83 e0       	ldi	r24, 0x03	; 3
  aa:	54 d0       	rcall	.+168    	; 0x154 <StatusLED>
				FrontLED(OFF);
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	03 c0       	rjmp	.+6      	; 0xb6 <main+0x6e>
				BackLED(OFF, OFF);
				MotorSpeed(0, 0);
				break;
			case 32:					// only K1
				StatusLED(OFF);
  b0:	80 e0       	ldi	r24, 0x00	; 0
  b2:	50 d0       	rcall	.+160    	; 0x154 <StatusLED>
				FrontLED(ON);
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	61 d0       	rcall	.+194    	; 0x17a <FrontLED>
				BackLED(OFF, OFF);
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	67 d0       	rcall	.+206    	; 0x18c <BackLED>
				MotorSpeed(0, 0);
  be:	80 e0       	ldi	r24, 0x00	; 0
  c0:	18 c0       	rjmp	.+48     	; 0xf2 <main+0xaa>
				break;
			case 3:						// K6 + K5
				StatusLED(OFF);
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	47 d0       	rcall	.+142    	; 0x154 <StatusLED>
				FrontLED(OFF);
  c6:	80 e0       	ldi	r24, 0x00	; 0
  c8:	58 d0       	rcall	.+176    	; 0x17a <FrontLED>
				BackLED(OFF, OFF);
  ca:	80 e0       	ldi	r24, 0x00	; 0
  cc:	60 e0       	ldi	r22, 0x00	; 0
  ce:	5e d0       	rcall	.+188    	; 0x18c <BackLED>
				MotorDir(FWD, FWD);
  d0:	80 e2       	ldi	r24, 0x20	; 32
  d2:	60 e2       	ldi	r22, 0x20	; 32
  d4:	36 d0       	rcall	.+108    	; 0x142 <MotorDir>
				MotorSpeed(0, 255);
  d6:	80 e0       	ldi	r24, 0x00	; 0
  d8:	6f ef       	ldi	r22, 0xFF	; 255
  da:	19 c0       	rjmp	.+50     	; 0x10e <main+0xc6>
				break;
			case 48:					// K1 + K2
				StatusLED(OFF);
  dc:	80 e0       	ldi	r24, 0x00	; 0
  de:	3a d0       	rcall	.+116    	; 0x154 <StatusLED>
				FrontLED(OFF);
  e0:	80 e0       	ldi	r24, 0x00	; 0
  e2:	4b d0       	rcall	.+150    	; 0x17a <FrontLED>
				BackLED(OFF, OFF);
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	60 e0       	ldi	r22, 0x00	; 0
  e8:	51 d0       	rcall	.+162    	; 0x18c <BackLED>
				MotorDir(FWD, FWD);
  ea:	80 e2       	ldi	r24, 0x20	; 32
  ec:	60 e2       	ldi	r22, 0x20	; 32
  ee:	29 d0       	rcall	.+82     	; 0x142 <MotorDir>
				MotorSpeed(255, 0);
  f0:	8f ef       	ldi	r24, 0xFF	; 255
  f2:	60 e0       	ldi	r22, 0x00	; 0
  f4:	0c c0       	rjmp	.+24     	; 0x10e <main+0xc6>
				break;
			case 12:					// K3 + K4
				StatusLED(OFF);
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	2d d0       	rcall	.+90     	; 0x154 <StatusLED>
				FrontLED(OFF);
  fa:	80 e0       	ldi	r24, 0x00	; 0
  fc:	3e d0       	rcall	.+124    	; 0x17a <FrontLED>
				BackLED(OFF, OFF);
  fe:	80 e0       	ldi	r24, 0x00	; 0
 100:	60 e0       	ldi	r22, 0x00	; 0
 102:	44 d0       	rcall	.+136    	; 0x18c <BackLED>
				MotorDir(RWD, RWD);
 104:	80 e1       	ldi	r24, 0x10	; 16
 106:	60 e1       	ldi	r22, 0x10	; 16
 108:	1c d0       	rcall	.+56     	; 0x142 <MotorDir>
				MotorSpeed(128, 128);
 10a:	80 e8       	ldi	r24, 0x80	; 128
 10c:	60 e8       	ldi	r22, 0x80	; 128
 10e:	12 d0       	rcall	.+36     	; 0x134 <MotorSpeed>
 110:	9c cf       	rjmp	.-200    	; 0x4a <main+0x2>

00000112 <__vector_3>:
volatile unsigned char count72kHz;

/* uses timer2 (36kHz for IR communication */
/* counts falling and rising edge => 36kHz*2 = 72kHz */
SIGNAL (SIG_OUTPUT_COMPARE2)
{
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
	count72kHz ++;
 11e:	80 91 60 00 	lds	r24, 0x0060
 122:	8f 5f       	subi	r24, 0xFF	; 255
 124:	80 93 60 00 	sts	0x0060, r24
}
 128:	8f 91       	pop	r24
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <MotorSpeed>:
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	9b bd       	out	0x2b, r25	; 43
 138:	8a bd       	out	0x2a, r24	; 42
	OCR1B = right_speed;
 13a:	70 e0       	ldi	r23, 0x00	; 0
 13c:	79 bd       	out	0x29, r23	; 41
 13e:	68 bd       	out	0x28, r22	; 40
}
 140:	08 95       	ret

00000142 <MotorDir>:

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 142:	92 b3       	in	r25, 0x12	; 18
 144:	9f 7c       	andi	r25, 0xCF	; 207
 146:	98 2b       	or	r25, r24
 148:	92 bb       	out	0x12, r25	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8f 7c       	andi	r24, 0xCF	; 207
 14e:	86 2b       	or	r24, r22
 150:	88 bb       	out	0x18, r24	; 24
}
 152:	08 95       	ret

00000154 <StatusLED>:
/* Status LED (OFF,GREEN,YELLOW,RED)*/
/* example code set StatusLED GREEN */
/* StatusLED(GREEN); */
inline void StatusLED(unsigned char color)
{
	if (color == OFF)    {GREEN_LED_OFF; RED_LED_OFF;}
 154:	88 23       	and	r24, r24
 156:	11 f4       	brne	.+4      	; 0x15c <StatusLED+0x8>
 158:	c0 98       	cbi	0x18, 0	; 24
 15a:	03 c0       	rjmp	.+6      	; 0x162 <StatusLED+0xe>
	if (color == GREEN)  {GREEN_LED_ON; RED_LED_OFF;} 
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	19 f4       	brne	.+6      	; 0x166 <StatusLED+0x12>
 160:	c0 9a       	sbi	0x18, 0	; 24
 162:	92 98       	cbi	0x12, 2	; 18
 164:	08 95       	ret
	if (color == YELLOW) {GREEN_LED_ON; RED_LED_ON;}
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	19 f4       	brne	.+6      	; 0x170 <StatusLED+0x1c>
 16a:	c0 9a       	sbi	0x18, 0	; 24
 16c:	92 9a       	sbi	0x12, 2	; 18
 16e:	08 95       	ret
	if (color == RED)    {GREEN_LED_OFF; RED_LED_ON;}
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	11 f4       	brne	.+4      	; 0x178 <StatusLED+0x24>
 174:	c0 98       	cbi	0x18, 0	; 24
 176:	92 9a       	sbi	0x12, 2	; 18
 178:	08 95       	ret

0000017a <FrontLED>:
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 17a:	92 b3       	in	r25, 0x12	; 18
 17c:	82 95       	swap	r24
 17e:	88 0f       	add	r24, r24
 180:	88 0f       	add	r24, r24
 182:	80 7c       	andi	r24, 0xC0	; 192
 184:	9f 7b       	andi	r25, 0xBF	; 191
 186:	98 2b       	or	r25, r24
 188:	92 bb       	out	0x12, r25	; 18
}
 18a:	08 95       	ret

0000018c <BackLED>:

/* function for Break LEDs */
/* example code right LED On left LED Off */
/* BackLED(OFF,ON); */
void BackLED(unsigned char left, unsigned char right)
{
 18c:	98 2f       	mov	r25, r24
	if (left || right) {
 18e:	88 23       	and	r24, r24
 190:	11 f4       	brne	.+4      	; 0x196 <BackLED+0xa>
 192:	66 23       	and	r22, r22
 194:	49 f0       	breq	.+18     	; 0x1a8 <BackLED+0x1c>
		PORTD &= ~(1 << PD7); // Wheel LED OFF
 196:	97 98       	cbi	0x12, 7	; 18
		DDRC |= (1 << PC0) | (1 << PC1); // Output => no odometrie
 198:	84 b3       	in	r24, 0x14	; 20
 19a:	83 60       	ori	r24, 0x03	; 3
 19c:	84 bb       	out	0x14, r24	; 20
		PORTC |= (1 << PC0) | (1 << PC1);
 19e:	85 b3       	in	r24, 0x15	; 21
 1a0:	83 60       	ori	r24, 0x03	; 3
 1a2:	85 bb       	out	0x15, r24	; 21
	}
	if (!left) PORTC &= ~(1 << PC1);
 1a4:	99 23       	and	r25, r25
 1a6:	09 f4       	brne	.+2      	; 0x1aa <BackLED+0x1e>
 1a8:	a9 98       	cbi	0x15, 1	; 21
	if (!right) PORTC &= ~(1 << PC0);
 1aa:	66 23       	and	r22, r22
 1ac:	09 f4       	brne	.+2      	; 0x1b0 <BackLED+0x24>
 1ae:	a8 98       	cbi	0x15, 0	; 21
 1b0:	08 95       	ret

000001b2 <Init>:
/* Init function Processor will be initalized to work correctly */
void Init (void)
{
	//-------- seriell interface programmed in boot routine and already running -------
	//  prepare 36kHz for IR - Communication
	TCCR2 = (1 << WGM21) | (1 << COM20) | (1 << CS20);
 1b2:	89 e1       	ldi	r24, 0x19	; 25
 1b4:	85 bd       	out	0x25, r24	; 37
	OCR2  = 0x6E; // 36kHz @8MHz
 1b6:	8e e6       	ldi	r24, 0x6E	; 110
 1b8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); // 36kHz counter for sleep
 1ba:	89 b7       	in	r24, 0x39	; 57
 1bc:	80 68       	ori	r24, 0x80	; 128
 1be:	89 bf       	out	0x39, r24	; 57
	
	// prepare RS232 
	UCSRA = 0x00;
 1c0:	1b b8       	out	0x0b, r1	; 11
	UCSRB = 0x00;	
 1c2:	1a b8       	out	0x0a, r1	; 10
	UCSRC = 0x86; // No Parity | 1 Stop Bit | 8 Data Bit
 1c4:	96 e8       	ldi	r25, 0x86	; 134
 1c6:	90 bd       	out	0x20, r25	; 32
	UBRRL = 0xCF; // 2400bps @ 8.00MHz
 1c8:	8f ec       	ldi	r24, 0xCF	; 207
 1ca:	89 b9       	out	0x09, r24	; 9
	
	// I/O Ports
	DDRB = IRTX | LEFT_DIR | PWM | GREEN_LED; 
 1cc:	8f e3       	ldi	r24, 0x3F	; 63
 1ce:	87 bb       	out	0x17, r24	; 23
	DDRD = RIGHT_DIR | FRONT_LED | ODOMETRIE_LED | RED_LED;
 1d0:	84 ef       	ldi	r24, 0xF4	; 244
 1d2:	81 bb       	out	0x11, r24	; 17
	
	// for PWM (8-Bit PWM) on OC1A & OC1B
	TCCR1A = (1 << WGM10) | (1 << COM1A1) | (1 << COM1B1);
 1d4:	81 ea       	ldi	r24, 0xA1	; 161
 1d6:	8f bd       	out	0x2f, r24	; 47
	// tmr1 running on MCU clock/8 
	TCCR1B = (1 << CS11);
 1d8:	82 e0       	ldi	r24, 0x02	; 2
 1da:	8e bd       	out	0x2e, r24	; 46
	
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
 1dc:	96 b9       	out	0x06, r25	; 6
	ODOMETRIE_LED_OFF;
 1de:	97 98       	cbi	0x12, 7	; 18
/* Front LED */
/* example code FrontLED ON */
/* FrontLED(ON); */
inline void FrontLED(unsigned char status)
{
	PORTD = (PORTD &~(1 << PD6)) | (status << PD6);
 1e0:	96 98       	cbi	0x12, 6	; 18
	// A/D Conversion
	ADCSRA = (1 << ADEN) | (1 << ADPS2) | (1 << ADPS1); // clk/64 
	ODOMETRIE_LED_OFF;

	FrontLED(OFF);
	BackLED(ON,ON);
 1e2:	81 e0       	ldi	r24, 0x01	; 1
 1e4:	61 e0       	ldi	r22, 0x01	; 1
 1e6:	d2 df       	rcall	.-92     	; 0x18c <BackLED>
	BackLED(OFF,OFF);
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	60 e0       	ldi	r22, 0x00	; 0
 1ec:	cf df       	rcall	.-98     	; 0x18c <BackLED>
	StatusLED(GREEN);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	b1 df       	rcall	.-158    	; 0x154 <StatusLED>
}

/* Set motor direction */
inline void MotorDir(unsigned char left_dir, unsigned char right_dir)
{
	PORTD = (PORTD &~ ((1 << PD4) | (1 << PD5))) | left_dir;
 1f2:	82 b3       	in	r24, 0x12	; 18
 1f4:	8f 7c       	andi	r24, 0xCF	; 207
 1f6:	80 62       	ori	r24, 0x20	; 32
 1f8:	82 bb       	out	0x12, r24	; 18
	PORTB = (PORTB &~ ((1 << PB4) | (1 << PB5))) | right_dir;
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	8f 7c       	andi	r24, 0xCF	; 207
 1fe:	80 62       	ori	r24, 0x20	; 32
 200:	88 bb       	out	0x18, r24	; 24
}

/* Set motor speed */
inline void MotorSpeed(unsigned char left_speed, unsigned char right_speed)
{
	OCR1A = left_speed;
 202:	1b bc       	out	0x2b, r1	; 43
 204:	1a bc       	out	0x2a, r1	; 42
	OCR1B = right_speed;
 206:	19 bc       	out	0x29, r1	; 41
 208:	18 bc       	out	0x28, r1	; 40
	BackLED(OFF,OFF);
	StatusLED(GREEN);
	
	MotorDir(FWD,FWD);
	MotorSpeed(0,0);
	sei();
 20a:	78 94       	sei
}
 20c:	08 95       	ret

0000020e <LineData>:
	if (!right) PORTC &= ~(1 << PC0);
}

/* function to read out line follow phototransistors (left,rigth) */
void LineData(unsigned int *data)
{
 20e:	fc 01       	movw	r30, r24
	ADMUX = (1 << REFS0) | IR_LEFT;	// AVCC reference with external capacitor
 210:	83 e4       	ldi	r24, 0x43	; 67
 212:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 214:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 216:	34 9b       	sbis	0x06, 4	; 6
 218:	fe cf       	rjmp	.-4      	; 0x216 <LineData+0x8>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 21a:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 21c:	34 b1       	in	r19, 0x04	; 4
 21e:	25 b1       	in	r18, 0x05	; 5
 220:	92 2f       	mov	r25, r18
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	83 0f       	add	r24, r19
 226:	91 1d       	adc	r25, r1
 228:	91 83       	std	Z+1, r25	; 0x01
 22a:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | IR_RIGHT;	// AVCC reference with external capacitor
 22c:	82 e4       	ldi	r24, 0x42	; 66
 22e:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 230:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 232:	34 9b       	sbis	0x06, 4	; 6
 234:	fe cf       	rjmp	.-4      	; 0x232 <LineData+0x24>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 236:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 238:	34 b1       	in	r19, 0x04	; 4
 23a:	25 b1       	in	r18, 0x05	; 5
 23c:	92 2f       	mov	r25, r18
 23e:	80 e0       	ldi	r24, 0x00	; 0
 240:	83 0f       	add	r24, r19
 242:	91 1d       	adc	r25, r1
 244:	93 83       	std	Z+3, r25	; 0x03
 246:	82 83       	std	Z+2, r24	; 0x02
}
 248:	08 95       	ret

0000024a <OdometrieData>:

/* function to read out odometrie phototransistors (left,rigth) */
void OdometrieData(unsigned int *data)
{
 24a:	fc 01       	movw	r30, r24
	DDRC &= ~((1 << PC0) | (1 << PC1)); // Input => no break LED
 24c:	84 b3       	in	r24, 0x14	; 20
 24e:	8c 7f       	andi	r24, 0xFC	; 252
 250:	84 bb       	out	0x14, r24	; 20
	ODOMETRIE_LED_ON;
 252:	97 9a       	sbi	0x12, 7	; 18
	
	ADMUX = (1 << REFS0) | WHEEL_LEFT; // AVCC reference with external capacitor
 254:	81 e4       	ldi	r24, 0x41	; 65
 256:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 258:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 25a:	34 9b       	sbis	0x06, 4	; 6
 25c:	fe cf       	rjmp	.-4      	; 0x25a <OdometrieData+0x10>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 25e:	34 9a       	sbi	0x06, 4	; 6
	data[0] = ADCL + (ADCH << 8);
 260:	34 b1       	in	r19, 0x04	; 4
 262:	25 b1       	in	r18, 0x05	; 5
 264:	92 2f       	mov	r25, r18
 266:	80 e0       	ldi	r24, 0x00	; 0
 268:	83 0f       	add	r24, r19
 26a:	91 1d       	adc	r25, r1
 26c:	91 83       	std	Z+1, r25	; 0x01
 26e:	80 83       	st	Z, r24
	
	ADMUX = (1 << REFS0) | WHEEL_RIGHT; // AVCC reference with external capacitor
 270:	80 e4       	ldi	r24, 0x40	; 64
 272:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);			// Start conversion
 274:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));	// wait for conversion complete
 276:	34 9b       	sbis	0x06, 4	; 6
 278:	fe cf       	rjmp	.-4      	; 0x276 <OdometrieData+0x2c>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 27a:	34 9a       	sbi	0x06, 4	; 6
	data[1] = ADCL + (ADCH << 8);
 27c:	34 b1       	in	r19, 0x04	; 4
 27e:	25 b1       	in	r18, 0x05	; 5
 280:	92 2f       	mov	r25, r18
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	83 0f       	add	r24, r19
 286:	91 1d       	adc	r25, r1
 288:	93 83       	std	Z+3, r25	; 0x03
 28a:	82 83       	std	Z+2, r24	; 0x02
}
 28c:	08 95       	ret

0000028e <SerWrite>:

/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
 28e:	28 e0       	ldi	r18, 0x08	; 8
 290:	2a b9       	out	0x0a, r18	; 10
 292:	fc 01       	movw	r30, r24
 294:	05 c0       	rjmp	.+10     	; 0x2a0 <SerWrite+0x12>
	while (length > 0) {
		if (UCSRA & 0x20) { // wait for empty transmit buffer
 296:	5d 9b       	sbis	0x0b, 5	; 11
 298:	fe cf       	rjmp	.-4      	; 0x296 <SerWrite+0x8>
			UDR = data[i++];
 29a:	81 91       	ld	r24, Z+
 29c:	8c b9       	out	0x0c, r24	; 12
			length --;
 29e:	61 50       	subi	r22, 0x01	; 1
/* function for serial communication */
void SerWrite(unsigned char *data,unsigned char length)
{
	unsigned char i = 0;
	UCSRB = 0x08; // enable transmitter
	while (length > 0) {
 2a0:	66 23       	and	r22, r22
 2a2:	c9 f7       	brne	.-14     	; 0x296 <SerWrite+0x8>
		if (UCSRA & 0x20) { // wait for empty transmit buffer
			UDR = data[i++];
			length --;
		}
	}
	while (!(UCSRA & 0x40)); 
 2a4:	5e 9b       	sbis	0x0b, 6	; 11
 2a6:	fe cf       	rjmp	.-4      	; 0x2a4 <SerWrite+0x16>
	for (i = 0; i < 0xFE; i++)
		for(length = 0; length < 0xFE; length++); 
}
 2a8:	08 95       	ret

000002aa <SerRead>:

void SerRead(unsigned char *data, unsigned char length,unsigned int timeout)
{
 2aa:	fc 01       	movw	r30, r24
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
 2ac:	80 e1       	ldi	r24, 0x10	; 16
 2ae:	8a b9       	out	0x0a, r24	; 10
	/* non blocking */
	if (timeout != 0) {
 2b0:	41 15       	cp	r20, r1
 2b2:	51 05       	cpc	r21, r1
 2b4:	11 f4       	brne	.+4      	; 0x2ba <SerRead+0x10>
 2b6:	90 e0       	ldi	r25, 0x00	; 0
 2b8:	1e c0       	rjmp	.+60     	; 0x2f6 <SerRead+0x4c>
 2ba:	df 01       	movw	r26, r30
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <SerRead+0x20>
		while (i < length && time++ < timeout) {
			if (UCSRA & 0x80) {
 2c0:	5f 9b       	sbis	0x0b, 7	; 11
 2c2:	07 c0       	rjmp	.+14     	; 0x2d2 <SerRead+0x28>
				data[i++] = UDR;
 2c4:	8c b1       	in	r24, 0x0c	; 12
 2c6:	8d 93       	st	X+, r24
 2c8:	7f 5f       	subi	r23, 0xFF	; 255
	unsigned char i = 0;
	unsigned int  time = 0;
	UCSRB = 0x10; // enable receiver
	/* non blocking */
	if (timeout != 0) {
		while (i < length && time++ < timeout) {
 2ca:	76 17       	cp	r23, r22
 2cc:	b0 f4       	brcc	.+44     	; 0x2fa <SerRead+0x50>
 2ce:	20 e0       	ldi	r18, 0x00	; 0
 2d0:	30 e0       	ldi	r19, 0x00	; 0
 2d2:	2f 5f       	subi	r18, 0xFF	; 255
 2d4:	3f 4f       	sbci	r19, 0xFF	; 255
 2d6:	c9 01       	movw	r24, r18
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	84 17       	cp	r24, r20
 2dc:	95 07       	cpc	r25, r21
 2de:	80 f3       	brcs	.-32     	; 0x2c0 <SerRead+0x16>
			if (UCSRA & 0x80) {
				data[i++] = UDR;
				time = 0;
			}
		}
		if (time > timeout) data[0] = 'T';
 2e0:	42 17       	cp	r20, r18
 2e2:	53 07       	cpc	r21, r19
 2e4:	50 f4       	brcc	.+20     	; 0x2fa <SerRead+0x50>
 2e6:	84 e5       	ldi	r24, 0x54	; 84
 2e8:	80 83       	st	Z, r24
 2ea:	08 95       	ret
	}
	/* blocking */
	else {
		while (i < length) {
			if (UCSRA & 0x80) 
 2ec:	5f 9b       	sbis	0x0b, 7	; 11
 2ee:	fe cf       	rjmp	.-4      	; 0x2ec <SerRead+0x42>
				data[i++] = UDR;
 2f0:	8c b1       	in	r24, 0x0c	; 12
 2f2:	81 93       	st	Z+, r24
 2f4:	9f 5f       	subi	r25, 0xFF	; 255
		}
		if (time > timeout) data[0] = 'T';
	}
	/* blocking */
	else {
		while (i < length) {
 2f6:	96 17       	cp	r25, r22
 2f8:	c8 f3       	brcs	.-14     	; 0x2ec <SerRead+0x42>
 2fa:	08 95       	ret

000002fc <PollSwitch>:
/* function to read out switches */
unsigned char PollSwitch (void)
{
	unsigned int i;
	
	DDRD |= SWITCHES;				// Switches as Output
 2fc:	8b 9a       	sbi	0x11, 3	; 17
	SWITCH_ON;						// Output HIGH for measurement
 2fe:	93 9a       	sbi	0x12, 3	; 18
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
 300:	84 e4       	ldi	r24, 0x44	; 68
 302:	87 b9       	out	0x07, r24	; 7
}

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
	count72kHz = 0;
 304:	10 92 60 00 	sts	0x0060, r1
	while (count72kHz < time72kHz);
 308:	80 91 60 00 	lds	r24, 0x0060
 30c:	8a 30       	cpi	r24, 0x0A	; 10
 30e:	e0 f3       	brcs	.-8      	; 0x308 <PollSwitch+0xc>
	DDRD |= SWITCHES;				// Switches as Output
	SWITCH_ON;						// Output HIGH for measurement
	ADMUX = (1 << REFS0) | SWITCH;	// AVCC reference with external capacitor
	Sleep(10);
	
	ADCSRA |= (1 << ADSC);			// Start conversion
 310:	36 9a       	sbi	0x06, 6	; 6
	while (!(ADCSRA & (1 << ADIF)));// wait for conversion complete
 312:	34 9b       	sbis	0x06, 4	; 6
 314:	fe cf       	rjmp	.-4      	; 0x312 <PollSwitch+0x16>
	ADCSRA |= (1 << ADIF);			// clear ADCIF
 316:	34 9a       	sbi	0x06, 4	; 6
	i = ADCL + (ADCH << 8);
 318:	34 b1       	in	r19, 0x04	; 4
 31a:	25 b1       	in	r18, 0x05	; 5
	
	SWITCH_OFF;
 31c:	93 98       	cbi	0x12, 3	; 18
 31e:	72 2f       	mov	r23, r18
 320:	60 e0       	ldi	r22, 0x00	; 0
 322:	63 0f       	add	r22, r19
 324:	71 1d       	adc	r23, r1
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	28 d1       	rcall	.+592    	; 0x57c <__floatunsisf>
 32c:	9b 01       	movw	r18, r22
 32e:	ac 01       	movw	r20, r24
 330:	60 e0       	ldi	r22, 0x00	; 0
 332:	70 e0       	ldi	r23, 0x00	; 0
 334:	80 e8       	ldi	r24, 0x80	; 128
 336:	94 e4       	ldi	r25, 0x44	; 68
 338:	8d d0       	rcall	.+282    	; 0x454 <__divsf3>
 33a:	20 e0       	ldi	r18, 0x00	; 0
 33c:	30 e0       	ldi	r19, 0x00	; 0
 33e:	40 e8       	ldi	r20, 0x80	; 128
 340:	5f e3       	ldi	r21, 0x3F	; 63
 342:	23 d0       	rcall	.+70     	; 0x38a <__subsf3>
 344:	20 e0       	ldi	r18, 0x00	; 0
 346:	30 e0       	ldi	r19, 0x00	; 0
 348:	4c e7       	ldi	r20, 0x7C	; 124
 34a:	52 e4       	ldi	r21, 0x42	; 66
 34c:	a5 d1       	rcall	.+842    	; 0x698 <__mulsf3>
 34e:	20 e0       	ldi	r18, 0x00	; 0
 350:	30 e0       	ldi	r19, 0x00	; 0
 352:	40 e0       	ldi	r20, 0x00	; 0
 354:	5f e3       	ldi	r21, 0x3F	; 63
 356:	1a d0       	rcall	.+52     	; 0x38c <__addsf3>
 358:	e5 d0       	rcall	.+458    	; 0x524 <__fixunssfsi>
 35a:	dc 01       	movw	r26, r24
 35c:	cb 01       	movw	r24, r22

	return  ((unsigned char) ((( 1024.0/(float)i - 1.0)) * 63.0 + 0.5));
}
 35e:	08 95       	ret

00000360 <StartSwitch>:

/* for working with Interrupt */
void StartSwitch(void)
{
	SWITCH_OFF;
 360:	93 98       	cbi	0x12, 3	; 18
	DDRD &= ~SWITCHES;					// Switches as Input => ext. Int 1
 362:	8b 98       	cbi	0x11, 3	; 17
	MCUCR &= ~((1 << ISC11) | (1 << ISC10));// Low level generates interrupt
 364:	85 b7       	in	r24, 0x35	; 53
 366:	83 7f       	andi	r24, 0xF3	; 243
 368:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT1);					// Enable external Interrupt 1 
 36a:	8b b7       	in	r24, 0x3b	; 59
 36c:	80 68       	ori	r24, 0x80	; 128
 36e:	8b bf       	out	0x3b, r24	; 59
}
 370:	08 95       	ret

00000372 <StopSwitch>:

void StopSwitch(void)
{
	GICR &= ~(1 << INT1);
 372:	8b b7       	in	r24, 0x3b	; 59
 374:	8f 77       	andi	r24, 0x7F	; 127
 376:	8b bf       	out	0x3b, r24	; 59
}
 378:	08 95       	ret

0000037a <Sleep>:

/* uses 72kHz timer => Sleep(x) = x/72kHz [sec] */
void Sleep(unsigned char time72kHz)
{
 37a:	98 2f       	mov	r25, r24
	count72kHz = 0;
 37c:	10 92 60 00 	sts	0x0060, r1
	while (count72kHz < time72kHz);
 380:	80 91 60 00 	lds	r24, 0x0060
 384:	89 17       	cp	r24, r25
 386:	e0 f3       	brcs	.-8      	; 0x380 <Sleep+0x6>
}
 388:	08 95       	ret

0000038a <__subsf3>:
 38a:	50 58       	subi	r21, 0x80	; 128

0000038c <__addsf3>:
 38c:	bb 27       	eor	r27, r27
 38e:	aa 27       	eor	r26, r26
 390:	0e d0       	rcall	.+28     	; 0x3ae <__addsf3x>
 392:	48 c1       	rjmp	.+656    	; 0x624 <__fp_round>
 394:	39 d1       	rcall	.+626    	; 0x608 <__fp_pscA>
 396:	30 f0       	brcs	.+12     	; 0x3a4 <__addsf3+0x18>
 398:	3e d1       	rcall	.+636    	; 0x616 <__fp_pscB>
 39a:	20 f0       	brcs	.+8      	; 0x3a4 <__addsf3+0x18>
 39c:	31 f4       	brne	.+12     	; 0x3aa <__addsf3+0x1e>
 39e:	9f 3f       	cpi	r25, 0xFF	; 255
 3a0:	11 f4       	brne	.+4      	; 0x3a6 <__addsf3+0x1a>
 3a2:	1e f4       	brtc	.+6      	; 0x3aa <__addsf3+0x1e>
 3a4:	2e c1       	rjmp	.+604    	; 0x602 <__fp_nan>
 3a6:	0e f4       	brtc	.+2      	; 0x3aa <__addsf3+0x1e>
 3a8:	e0 95       	com	r30
 3aa:	e7 fb       	bst	r30, 7
 3ac:	24 c1       	rjmp	.+584    	; 0x5f6 <__fp_inf>

000003ae <__addsf3x>:
 3ae:	e9 2f       	mov	r30, r25
 3b0:	4a d1       	rcall	.+660    	; 0x646 <__fp_split3>
 3b2:	80 f3       	brcs	.-32     	; 0x394 <__addsf3+0x8>
 3b4:	ba 17       	cp	r27, r26
 3b6:	62 07       	cpc	r22, r18
 3b8:	73 07       	cpc	r23, r19
 3ba:	84 07       	cpc	r24, r20
 3bc:	95 07       	cpc	r25, r21
 3be:	18 f0       	brcs	.+6      	; 0x3c6 <__addsf3x+0x18>
 3c0:	71 f4       	brne	.+28     	; 0x3de <__addsf3x+0x30>
 3c2:	9e f5       	brtc	.+102    	; 0x42a <__addsf3x+0x7c>
 3c4:	62 c1       	rjmp	.+708    	; 0x68a <__fp_zero>
 3c6:	0e f4       	brtc	.+2      	; 0x3ca <__addsf3x+0x1c>
 3c8:	e0 95       	com	r30
 3ca:	0b 2e       	mov	r0, r27
 3cc:	ba 2f       	mov	r27, r26
 3ce:	a0 2d       	mov	r26, r0
 3d0:	0b 01       	movw	r0, r22
 3d2:	b9 01       	movw	r22, r18
 3d4:	90 01       	movw	r18, r0
 3d6:	0c 01       	movw	r0, r24
 3d8:	ca 01       	movw	r24, r20
 3da:	a0 01       	movw	r20, r0
 3dc:	11 24       	eor	r1, r1
 3de:	ff 27       	eor	r31, r31
 3e0:	59 1b       	sub	r21, r25
 3e2:	99 f0       	breq	.+38     	; 0x40a <__addsf3x+0x5c>
 3e4:	59 3f       	cpi	r21, 0xF9	; 249
 3e6:	50 f4       	brcc	.+20     	; 0x3fc <__addsf3x+0x4e>
 3e8:	50 3e       	cpi	r21, 0xE0	; 224
 3ea:	68 f1       	brcs	.+90     	; 0x446 <__addsf3x+0x98>
 3ec:	1a 16       	cp	r1, r26
 3ee:	f0 40       	sbci	r31, 0x00	; 0
 3f0:	a2 2f       	mov	r26, r18
 3f2:	23 2f       	mov	r18, r19
 3f4:	34 2f       	mov	r19, r20
 3f6:	44 27       	eor	r20, r20
 3f8:	58 5f       	subi	r21, 0xF8	; 248
 3fa:	f3 cf       	rjmp	.-26     	; 0x3e2 <__addsf3x+0x34>
 3fc:	46 95       	lsr	r20
 3fe:	37 95       	ror	r19
 400:	27 95       	ror	r18
 402:	a7 95       	ror	r26
 404:	f0 40       	sbci	r31, 0x00	; 0
 406:	53 95       	inc	r21
 408:	c9 f7       	brne	.-14     	; 0x3fc <__addsf3x+0x4e>
 40a:	7e f4       	brtc	.+30     	; 0x42a <__addsf3x+0x7c>
 40c:	1f 16       	cp	r1, r31
 40e:	ba 0b       	sbc	r27, r26
 410:	62 0b       	sbc	r22, r18
 412:	73 0b       	sbc	r23, r19
 414:	84 0b       	sbc	r24, r20
 416:	ba f0       	brmi	.+46     	; 0x446 <__addsf3x+0x98>
 418:	91 50       	subi	r25, 0x01	; 1
 41a:	a1 f0       	breq	.+40     	; 0x444 <__addsf3x+0x96>
 41c:	ff 0f       	add	r31, r31
 41e:	bb 1f       	adc	r27, r27
 420:	66 1f       	adc	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	88 1f       	adc	r24, r24
 426:	c2 f7       	brpl	.-16     	; 0x418 <__addsf3x+0x6a>
 428:	0e c0       	rjmp	.+28     	; 0x446 <__addsf3x+0x98>
 42a:	ba 0f       	add	r27, r26
 42c:	62 1f       	adc	r22, r18
 42e:	73 1f       	adc	r23, r19
 430:	84 1f       	adc	r24, r20
 432:	48 f4       	brcc	.+18     	; 0x446 <__addsf3x+0x98>
 434:	87 95       	ror	r24
 436:	77 95       	ror	r23
 438:	67 95       	ror	r22
 43a:	b7 95       	ror	r27
 43c:	f7 95       	ror	r31
 43e:	9e 3f       	cpi	r25, 0xFE	; 254
 440:	08 f0       	brcs	.+2      	; 0x444 <__addsf3x+0x96>
 442:	b3 cf       	rjmp	.-154    	; 0x3aa <__addsf3+0x1e>
 444:	93 95       	inc	r25
 446:	88 0f       	add	r24, r24
 448:	08 f0       	brcs	.+2      	; 0x44c <__addsf3x+0x9e>
 44a:	99 27       	eor	r25, r25
 44c:	ee 0f       	add	r30, r30
 44e:	97 95       	ror	r25
 450:	87 95       	ror	r24
 452:	08 95       	ret

00000454 <__divsf3>:
 454:	0c d0       	rcall	.+24     	; 0x46e <__divsf3x>
 456:	e6 c0       	rjmp	.+460    	; 0x624 <__fp_round>
 458:	de d0       	rcall	.+444    	; 0x616 <__fp_pscB>
 45a:	40 f0       	brcs	.+16     	; 0x46c <__stack+0xd>
 45c:	d5 d0       	rcall	.+426    	; 0x608 <__fp_pscA>
 45e:	30 f0       	brcs	.+12     	; 0x46c <__stack+0xd>
 460:	21 f4       	brne	.+8      	; 0x46a <__stack+0xb>
 462:	5f 3f       	cpi	r21, 0xFF	; 255
 464:	19 f0       	breq	.+6      	; 0x46c <__stack+0xd>
 466:	c7 c0       	rjmp	.+398    	; 0x5f6 <__fp_inf>
 468:	51 11       	cpse	r21, r1
 46a:	10 c1       	rjmp	.+544    	; 0x68c <__fp_szero>
 46c:	ca c0       	rjmp	.+404    	; 0x602 <__fp_nan>

0000046e <__divsf3x>:
 46e:	eb d0       	rcall	.+470    	; 0x646 <__fp_split3>
 470:	98 f3       	brcs	.-26     	; 0x458 <__divsf3+0x4>

00000472 <__divsf3_pse>:
 472:	99 23       	and	r25, r25
 474:	c9 f3       	breq	.-14     	; 0x468 <__stack+0x9>
 476:	55 23       	and	r21, r21
 478:	b1 f3       	breq	.-20     	; 0x466 <__stack+0x7>
 47a:	95 1b       	sub	r25, r21
 47c:	55 0b       	sbc	r21, r21
 47e:	bb 27       	eor	r27, r27
 480:	aa 27       	eor	r26, r26
 482:	62 17       	cp	r22, r18
 484:	73 07       	cpc	r23, r19
 486:	84 07       	cpc	r24, r20
 488:	38 f0       	brcs	.+14     	; 0x498 <__divsf3_pse+0x26>
 48a:	9f 5f       	subi	r25, 0xFF	; 255
 48c:	5f 4f       	sbci	r21, 0xFF	; 255
 48e:	22 0f       	add	r18, r18
 490:	33 1f       	adc	r19, r19
 492:	44 1f       	adc	r20, r20
 494:	aa 1f       	adc	r26, r26
 496:	a9 f3       	breq	.-22     	; 0x482 <__divsf3_pse+0x10>
 498:	33 d0       	rcall	.+102    	; 0x500 <__divsf3_pse+0x8e>
 49a:	0e 2e       	mov	r0, r30
 49c:	3a f0       	brmi	.+14     	; 0x4ac <__divsf3_pse+0x3a>
 49e:	e0 e8       	ldi	r30, 0x80	; 128
 4a0:	30 d0       	rcall	.+96     	; 0x502 <__divsf3_pse+0x90>
 4a2:	91 50       	subi	r25, 0x01	; 1
 4a4:	50 40       	sbci	r21, 0x00	; 0
 4a6:	e6 95       	lsr	r30
 4a8:	00 1c       	adc	r0, r0
 4aa:	ca f7       	brpl	.-14     	; 0x49e <__divsf3_pse+0x2c>
 4ac:	29 d0       	rcall	.+82     	; 0x500 <__divsf3_pse+0x8e>
 4ae:	fe 2f       	mov	r31, r30
 4b0:	27 d0       	rcall	.+78     	; 0x500 <__divsf3_pse+0x8e>
 4b2:	66 0f       	add	r22, r22
 4b4:	77 1f       	adc	r23, r23
 4b6:	88 1f       	adc	r24, r24
 4b8:	bb 1f       	adc	r27, r27
 4ba:	26 17       	cp	r18, r22
 4bc:	37 07       	cpc	r19, r23
 4be:	48 07       	cpc	r20, r24
 4c0:	ab 07       	cpc	r26, r27
 4c2:	b0 e8       	ldi	r27, 0x80	; 128
 4c4:	09 f0       	breq	.+2      	; 0x4c8 <__divsf3_pse+0x56>
 4c6:	bb 0b       	sbc	r27, r27
 4c8:	80 2d       	mov	r24, r0
 4ca:	bf 01       	movw	r22, r30
 4cc:	ff 27       	eor	r31, r31
 4ce:	93 58       	subi	r25, 0x83	; 131
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	2a f0       	brmi	.+10     	; 0x4de <__divsf3_pse+0x6c>
 4d4:	9e 3f       	cpi	r25, 0xFE	; 254
 4d6:	51 05       	cpc	r21, r1
 4d8:	68 f0       	brcs	.+26     	; 0x4f4 <__divsf3_pse+0x82>
 4da:	8d c0       	rjmp	.+282    	; 0x5f6 <__fp_inf>
 4dc:	d7 c0       	rjmp	.+430    	; 0x68c <__fp_szero>
 4de:	5f 3f       	cpi	r21, 0xFF	; 255
 4e0:	ec f3       	brlt	.-6      	; 0x4dc <__divsf3_pse+0x6a>
 4e2:	98 3e       	cpi	r25, 0xE8	; 232
 4e4:	dc f3       	brlt	.-10     	; 0x4dc <__divsf3_pse+0x6a>
 4e6:	86 95       	lsr	r24
 4e8:	77 95       	ror	r23
 4ea:	67 95       	ror	r22
 4ec:	b7 95       	ror	r27
 4ee:	f7 95       	ror	r31
 4f0:	9f 5f       	subi	r25, 0xFF	; 255
 4f2:	c9 f7       	brne	.-14     	; 0x4e6 <__divsf3_pse+0x74>
 4f4:	88 0f       	add	r24, r24
 4f6:	91 1d       	adc	r25, r1
 4f8:	96 95       	lsr	r25
 4fa:	87 95       	ror	r24
 4fc:	97 f9       	bld	r25, 7
 4fe:	08 95       	ret
 500:	e1 e0       	ldi	r30, 0x01	; 1
 502:	66 0f       	add	r22, r22
 504:	77 1f       	adc	r23, r23
 506:	88 1f       	adc	r24, r24
 508:	bb 1f       	adc	r27, r27
 50a:	62 17       	cp	r22, r18
 50c:	73 07       	cpc	r23, r19
 50e:	84 07       	cpc	r24, r20
 510:	ba 07       	cpc	r27, r26
 512:	20 f0       	brcs	.+8      	; 0x51c <__divsf3_pse+0xaa>
 514:	62 1b       	sub	r22, r18
 516:	73 0b       	sbc	r23, r19
 518:	84 0b       	sbc	r24, r20
 51a:	ba 0b       	sbc	r27, r26
 51c:	ee 1f       	adc	r30, r30
 51e:	88 f7       	brcc	.-30     	; 0x502 <__divsf3_pse+0x90>
 520:	e0 95       	com	r30
 522:	08 95       	ret

00000524 <__fixunssfsi>:
 524:	98 d0       	rcall	.+304    	; 0x656 <__fp_splitA>
 526:	88 f0       	brcs	.+34     	; 0x54a <__fixunssfsi+0x26>
 528:	9f 57       	subi	r25, 0x7F	; 127
 52a:	90 f0       	brcs	.+36     	; 0x550 <__fixunssfsi+0x2c>
 52c:	b9 2f       	mov	r27, r25
 52e:	99 27       	eor	r25, r25
 530:	b7 51       	subi	r27, 0x17	; 23
 532:	a0 f0       	brcs	.+40     	; 0x55c <__fixunssfsi+0x38>
 534:	d1 f0       	breq	.+52     	; 0x56a <__fixunssfsi+0x46>
 536:	66 0f       	add	r22, r22
 538:	77 1f       	adc	r23, r23
 53a:	88 1f       	adc	r24, r24
 53c:	99 1f       	adc	r25, r25
 53e:	1a f0       	brmi	.+6      	; 0x546 <__fixunssfsi+0x22>
 540:	ba 95       	dec	r27
 542:	c9 f7       	brne	.-14     	; 0x536 <__fixunssfsi+0x12>
 544:	12 c0       	rjmp	.+36     	; 0x56a <__fixunssfsi+0x46>
 546:	b1 30       	cpi	r27, 0x01	; 1
 548:	81 f0       	breq	.+32     	; 0x56a <__fixunssfsi+0x46>
 54a:	9f d0       	rcall	.+318    	; 0x68a <__fp_zero>
 54c:	b1 e0       	ldi	r27, 0x01	; 1
 54e:	08 95       	ret
 550:	9c c0       	rjmp	.+312    	; 0x68a <__fp_zero>
 552:	67 2f       	mov	r22, r23
 554:	78 2f       	mov	r23, r24
 556:	88 27       	eor	r24, r24
 558:	b8 5f       	subi	r27, 0xF8	; 248
 55a:	39 f0       	breq	.+14     	; 0x56a <__fixunssfsi+0x46>
 55c:	b9 3f       	cpi	r27, 0xF9	; 249
 55e:	cc f3       	brlt	.-14     	; 0x552 <__fixunssfsi+0x2e>
 560:	86 95       	lsr	r24
 562:	77 95       	ror	r23
 564:	67 95       	ror	r22
 566:	b3 95       	inc	r27
 568:	d9 f7       	brne	.-10     	; 0x560 <__fixunssfsi+0x3c>
 56a:	3e f4       	brtc	.+14     	; 0x57a <__fixunssfsi+0x56>
 56c:	90 95       	com	r25
 56e:	80 95       	com	r24
 570:	70 95       	com	r23
 572:	61 95       	neg	r22
 574:	7f 4f       	sbci	r23, 0xFF	; 255
 576:	8f 4f       	sbci	r24, 0xFF	; 255
 578:	9f 4f       	sbci	r25, 0xFF	; 255
 57a:	08 95       	ret

0000057c <__floatunsisf>:
 57c:	e8 94       	clt
 57e:	09 c0       	rjmp	.+18     	; 0x592 <__floatsisf+0x12>

00000580 <__floatsisf>:
 580:	97 fb       	bst	r25, 7
 582:	3e f4       	brtc	.+14     	; 0x592 <__floatsisf+0x12>
 584:	90 95       	com	r25
 586:	80 95       	com	r24
 588:	70 95       	com	r23
 58a:	61 95       	neg	r22
 58c:	7f 4f       	sbci	r23, 0xFF	; 255
 58e:	8f 4f       	sbci	r24, 0xFF	; 255
 590:	9f 4f       	sbci	r25, 0xFF	; 255
 592:	99 23       	and	r25, r25
 594:	a9 f0       	breq	.+42     	; 0x5c0 <__floatsisf+0x40>
 596:	f9 2f       	mov	r31, r25
 598:	96 e9       	ldi	r25, 0x96	; 150
 59a:	bb 27       	eor	r27, r27
 59c:	93 95       	inc	r25
 59e:	f6 95       	lsr	r31
 5a0:	87 95       	ror	r24
 5a2:	77 95       	ror	r23
 5a4:	67 95       	ror	r22
 5a6:	b7 95       	ror	r27
 5a8:	f1 11       	cpse	r31, r1
 5aa:	f8 cf       	rjmp	.-16     	; 0x59c <__floatsisf+0x1c>
 5ac:	fa f4       	brpl	.+62     	; 0x5ec <__floatsisf+0x6c>
 5ae:	bb 0f       	add	r27, r27
 5b0:	11 f4       	brne	.+4      	; 0x5b6 <__floatsisf+0x36>
 5b2:	60 ff       	sbrs	r22, 0
 5b4:	1b c0       	rjmp	.+54     	; 0x5ec <__floatsisf+0x6c>
 5b6:	6f 5f       	subi	r22, 0xFF	; 255
 5b8:	7f 4f       	sbci	r23, 0xFF	; 255
 5ba:	8f 4f       	sbci	r24, 0xFF	; 255
 5bc:	9f 4f       	sbci	r25, 0xFF	; 255
 5be:	16 c0       	rjmp	.+44     	; 0x5ec <__floatsisf+0x6c>
 5c0:	88 23       	and	r24, r24
 5c2:	11 f0       	breq	.+4      	; 0x5c8 <__floatsisf+0x48>
 5c4:	96 e9       	ldi	r25, 0x96	; 150
 5c6:	11 c0       	rjmp	.+34     	; 0x5ea <__floatsisf+0x6a>
 5c8:	77 23       	and	r23, r23
 5ca:	21 f0       	breq	.+8      	; 0x5d4 <__floatsisf+0x54>
 5cc:	9e e8       	ldi	r25, 0x8E	; 142
 5ce:	87 2f       	mov	r24, r23
 5d0:	76 2f       	mov	r23, r22
 5d2:	05 c0       	rjmp	.+10     	; 0x5de <__floatsisf+0x5e>
 5d4:	66 23       	and	r22, r22
 5d6:	71 f0       	breq	.+28     	; 0x5f4 <__floatsisf+0x74>
 5d8:	96 e8       	ldi	r25, 0x86	; 134
 5da:	86 2f       	mov	r24, r22
 5dc:	70 e0       	ldi	r23, 0x00	; 0
 5de:	60 e0       	ldi	r22, 0x00	; 0
 5e0:	2a f0       	brmi	.+10     	; 0x5ec <__floatsisf+0x6c>
 5e2:	9a 95       	dec	r25
 5e4:	66 0f       	add	r22, r22
 5e6:	77 1f       	adc	r23, r23
 5e8:	88 1f       	adc	r24, r24
 5ea:	da f7       	brpl	.-10     	; 0x5e2 <__floatsisf+0x62>
 5ec:	88 0f       	add	r24, r24
 5ee:	96 95       	lsr	r25
 5f0:	87 95       	ror	r24
 5f2:	97 f9       	bld	r25, 7
 5f4:	08 95       	ret

000005f6 <__fp_inf>:
 5f6:	97 f9       	bld	r25, 7
 5f8:	9f 67       	ori	r25, 0x7F	; 127
 5fa:	80 e8       	ldi	r24, 0x80	; 128
 5fc:	70 e0       	ldi	r23, 0x00	; 0
 5fe:	60 e0       	ldi	r22, 0x00	; 0
 600:	08 95       	ret

00000602 <__fp_nan>:
 602:	9f ef       	ldi	r25, 0xFF	; 255
 604:	80 ec       	ldi	r24, 0xC0	; 192
 606:	08 95       	ret

00000608 <__fp_pscA>:
 608:	00 24       	eor	r0, r0
 60a:	0a 94       	dec	r0
 60c:	16 16       	cp	r1, r22
 60e:	17 06       	cpc	r1, r23
 610:	18 06       	cpc	r1, r24
 612:	09 06       	cpc	r0, r25
 614:	08 95       	ret

00000616 <__fp_pscB>:
 616:	00 24       	eor	r0, r0
 618:	0a 94       	dec	r0
 61a:	12 16       	cp	r1, r18
 61c:	13 06       	cpc	r1, r19
 61e:	14 06       	cpc	r1, r20
 620:	05 06       	cpc	r0, r21
 622:	08 95       	ret

00000624 <__fp_round>:
 624:	09 2e       	mov	r0, r25
 626:	03 94       	inc	r0
 628:	00 0c       	add	r0, r0
 62a:	11 f4       	brne	.+4      	; 0x630 <__fp_round+0xc>
 62c:	88 23       	and	r24, r24
 62e:	52 f0       	brmi	.+20     	; 0x644 <__fp_round+0x20>
 630:	bb 0f       	add	r27, r27
 632:	40 f4       	brcc	.+16     	; 0x644 <__fp_round+0x20>
 634:	bf 2b       	or	r27, r31
 636:	11 f4       	brne	.+4      	; 0x63c <__fp_round+0x18>
 638:	60 ff       	sbrs	r22, 0
 63a:	04 c0       	rjmp	.+8      	; 0x644 <__fp_round+0x20>
 63c:	6f 5f       	subi	r22, 0xFF	; 255
 63e:	7f 4f       	sbci	r23, 0xFF	; 255
 640:	8f 4f       	sbci	r24, 0xFF	; 255
 642:	9f 4f       	sbci	r25, 0xFF	; 255
 644:	08 95       	ret

00000646 <__fp_split3>:
 646:	57 fd       	sbrc	r21, 7
 648:	90 58       	subi	r25, 0x80	; 128
 64a:	44 0f       	add	r20, r20
 64c:	55 1f       	adc	r21, r21
 64e:	59 f0       	breq	.+22     	; 0x666 <__fp_splitA+0x10>
 650:	5f 3f       	cpi	r21, 0xFF	; 255
 652:	71 f0       	breq	.+28     	; 0x670 <__fp_splitA+0x1a>
 654:	47 95       	ror	r20

00000656 <__fp_splitA>:
 656:	88 0f       	add	r24, r24
 658:	97 fb       	bst	r25, 7
 65a:	99 1f       	adc	r25, r25
 65c:	61 f0       	breq	.+24     	; 0x676 <__fp_splitA+0x20>
 65e:	9f 3f       	cpi	r25, 0xFF	; 255
 660:	79 f0       	breq	.+30     	; 0x680 <__fp_splitA+0x2a>
 662:	87 95       	ror	r24
 664:	08 95       	ret
 666:	12 16       	cp	r1, r18
 668:	13 06       	cpc	r1, r19
 66a:	14 06       	cpc	r1, r20
 66c:	55 1f       	adc	r21, r21
 66e:	f2 cf       	rjmp	.-28     	; 0x654 <__fp_split3+0xe>
 670:	46 95       	lsr	r20
 672:	f1 df       	rcall	.-30     	; 0x656 <__fp_splitA>
 674:	08 c0       	rjmp	.+16     	; 0x686 <__fp_splitA+0x30>
 676:	16 16       	cp	r1, r22
 678:	17 06       	cpc	r1, r23
 67a:	18 06       	cpc	r1, r24
 67c:	99 1f       	adc	r25, r25
 67e:	f1 cf       	rjmp	.-30     	; 0x662 <__fp_splitA+0xc>
 680:	86 95       	lsr	r24
 682:	71 05       	cpc	r23, r1
 684:	61 05       	cpc	r22, r1
 686:	08 94       	sec
 688:	08 95       	ret

0000068a <__fp_zero>:
 68a:	e8 94       	clt

0000068c <__fp_szero>:
 68c:	bb 27       	eor	r27, r27
 68e:	66 27       	eor	r22, r22
 690:	77 27       	eor	r23, r23
 692:	cb 01       	movw	r24, r22
 694:	97 f9       	bld	r25, 7
 696:	08 95       	ret

00000698 <__mulsf3>:
 698:	0b d0       	rcall	.+22     	; 0x6b0 <__mulsf3x>
 69a:	c4 cf       	rjmp	.-120    	; 0x624 <__fp_round>
 69c:	b5 df       	rcall	.-150    	; 0x608 <__fp_pscA>
 69e:	28 f0       	brcs	.+10     	; 0x6aa <__mulsf3+0x12>
 6a0:	ba df       	rcall	.-140    	; 0x616 <__fp_pscB>
 6a2:	18 f0       	brcs	.+6      	; 0x6aa <__mulsf3+0x12>
 6a4:	95 23       	and	r25, r21
 6a6:	09 f0       	breq	.+2      	; 0x6aa <__mulsf3+0x12>
 6a8:	a6 cf       	rjmp	.-180    	; 0x5f6 <__fp_inf>
 6aa:	ab cf       	rjmp	.-170    	; 0x602 <__fp_nan>
 6ac:	11 24       	eor	r1, r1
 6ae:	ee cf       	rjmp	.-36     	; 0x68c <__fp_szero>

000006b0 <__mulsf3x>:
 6b0:	ca df       	rcall	.-108    	; 0x646 <__fp_split3>
 6b2:	a0 f3       	brcs	.-24     	; 0x69c <__mulsf3+0x4>

000006b4 <__mulsf3_pse>:
 6b4:	95 9f       	mul	r25, r21
 6b6:	d1 f3       	breq	.-12     	; 0x6ac <__mulsf3+0x14>
 6b8:	95 0f       	add	r25, r21
 6ba:	50 e0       	ldi	r21, 0x00	; 0
 6bc:	55 1f       	adc	r21, r21
 6be:	62 9f       	mul	r22, r18
 6c0:	f0 01       	movw	r30, r0
 6c2:	72 9f       	mul	r23, r18
 6c4:	bb 27       	eor	r27, r27
 6c6:	f0 0d       	add	r31, r0
 6c8:	b1 1d       	adc	r27, r1
 6ca:	63 9f       	mul	r22, r19
 6cc:	aa 27       	eor	r26, r26
 6ce:	f0 0d       	add	r31, r0
 6d0:	b1 1d       	adc	r27, r1
 6d2:	aa 1f       	adc	r26, r26
 6d4:	64 9f       	mul	r22, r20
 6d6:	66 27       	eor	r22, r22
 6d8:	b0 0d       	add	r27, r0
 6da:	a1 1d       	adc	r26, r1
 6dc:	66 1f       	adc	r22, r22
 6de:	82 9f       	mul	r24, r18
 6e0:	22 27       	eor	r18, r18
 6e2:	b0 0d       	add	r27, r0
 6e4:	a1 1d       	adc	r26, r1
 6e6:	62 1f       	adc	r22, r18
 6e8:	73 9f       	mul	r23, r19
 6ea:	b0 0d       	add	r27, r0
 6ec:	a1 1d       	adc	r26, r1
 6ee:	62 1f       	adc	r22, r18
 6f0:	83 9f       	mul	r24, r19
 6f2:	a0 0d       	add	r26, r0
 6f4:	61 1d       	adc	r22, r1
 6f6:	22 1f       	adc	r18, r18
 6f8:	74 9f       	mul	r23, r20
 6fa:	33 27       	eor	r19, r19
 6fc:	a0 0d       	add	r26, r0
 6fe:	61 1d       	adc	r22, r1
 700:	23 1f       	adc	r18, r19
 702:	84 9f       	mul	r24, r20
 704:	60 0d       	add	r22, r0
 706:	21 1d       	adc	r18, r1
 708:	82 2f       	mov	r24, r18
 70a:	76 2f       	mov	r23, r22
 70c:	6a 2f       	mov	r22, r26
 70e:	11 24       	eor	r1, r1
 710:	9f 57       	subi	r25, 0x7F	; 127
 712:	50 40       	sbci	r21, 0x00	; 0
 714:	8a f0       	brmi	.+34     	; 0x738 <__mulsf3_pse+0x84>
 716:	e1 f0       	breq	.+56     	; 0x750 <__mulsf3_pse+0x9c>
 718:	88 23       	and	r24, r24
 71a:	4a f0       	brmi	.+18     	; 0x72e <__mulsf3_pse+0x7a>
 71c:	ee 0f       	add	r30, r30
 71e:	ff 1f       	adc	r31, r31
 720:	bb 1f       	adc	r27, r27
 722:	66 1f       	adc	r22, r22
 724:	77 1f       	adc	r23, r23
 726:	88 1f       	adc	r24, r24
 728:	91 50       	subi	r25, 0x01	; 1
 72a:	50 40       	sbci	r21, 0x00	; 0
 72c:	a9 f7       	brne	.-22     	; 0x718 <__mulsf3_pse+0x64>
 72e:	9e 3f       	cpi	r25, 0xFE	; 254
 730:	51 05       	cpc	r21, r1
 732:	70 f0       	brcs	.+28     	; 0x750 <__mulsf3_pse+0x9c>
 734:	60 cf       	rjmp	.-320    	; 0x5f6 <__fp_inf>
 736:	aa cf       	rjmp	.-172    	; 0x68c <__fp_szero>
 738:	5f 3f       	cpi	r21, 0xFF	; 255
 73a:	ec f3       	brlt	.-6      	; 0x736 <__mulsf3_pse+0x82>
 73c:	98 3e       	cpi	r25, 0xE8	; 232
 73e:	dc f3       	brlt	.-10     	; 0x736 <__mulsf3_pse+0x82>
 740:	86 95       	lsr	r24
 742:	77 95       	ror	r23
 744:	67 95       	ror	r22
 746:	b7 95       	ror	r27
 748:	f7 95       	ror	r31
 74a:	e7 95       	ror	r30
 74c:	9f 5f       	subi	r25, 0xFF	; 255
 74e:	c1 f7       	brne	.-16     	; 0x740 <__mulsf3_pse+0x8c>
 750:	fe 2b       	or	r31, r30
 752:	88 0f       	add	r24, r24
 754:	91 1d       	adc	r25, r1
 756:	96 95       	lsr	r25
 758:	87 95       	ror	r24
 75a:	97 f9       	bld	r25, 7
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
